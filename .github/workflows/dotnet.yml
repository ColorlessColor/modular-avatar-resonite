# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build .NET artifacts

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        description: 'commit to build'
        type: string
        required: false

env:
  RPC_SERVER_SRC: Resonite~/ResoniteHook
  RESONITE_PATH: "C:\\Program Files (x86)\\Steam\\steamapps\\common\\Resonite"
  RESONITE_ASSEMBLY_PATH: "C:\\Program Files (x86)\\Steam\\steamapps\\common\\Resonite\\Resonite_Data\\Managed\\"
  CACHE_SALT: -v2
  REPO: bdunderscore/modular-avatar-resonite

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.ref || github.ref }}
        lfs: true

    - uses: nuget/setup-nuget@v2
      with:
        nuget-version: '5.x'

    - name: Restore dependencies (.NET 4.7.2)
      run: nuget restore "${{ env.RPC_SERVER_SRC }}/ResoPuppetSchema" -PackagesDirectory "${{ env.RPC_SERVER_SRC }}/packages" -Verbosity normal

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x 

    - name: Restore dependencies
      run: dotnet restore "${{ env.RPC_SERVER_SRC }}" -v normal

    - run: dir "${{ env.RPC_SERVER_SRC }}/packages"

    - name: Cache resonite
      id: cache-resonite
      uses: actions/cache/restore@v4
      with:
        path: "${{ env.RESONITE_PATH }}"
        key: resonite-${{ env.CACHE_SALT }}

    - name: Cache steamcmd
      id: cache-steamcmd
      if: steps.cache-resonite.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: c:\steamcmd
        key: steamcmd

    - name: Setup steamcmd
      if: steps.cache-steamcmd.outputs.cache-hit != 'true' && steps.cache-resonite.outputs.cache-hit != 'true'
      run: |
        cd c:\
        Invoke-WebRequest https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip -OutFile c:\steamcmd.zip
        Expand-Archive c:\steamcmd.zip -Force
        New-Item -ItemType Directory -Path "${{ env.RESONITE_PATH }}"
        dir c:\steamcmd

    - name: Update steamcmd
      if: steps.cache-resonite.outputs.cache-hit != 'true'
      run: |
        $ErrorAction = "Ignore"
        # run updater first
        c:\steamcmd\steamcmd +quit
        # steamcmd exits with a nonzero error code even when successful, suppress the error
        Exit 0


    - name: Install resonite
      id: install-resonite
      if: steps.cache-resonite.outputs.cache-hit != 'true'
      run: |
        c:\steamcmd\steamcmd +force_install_dir "${{ env.RESONITE_PATH }}" +login ${{ secrets.STEAMUSER }} ${{ secrets.STEAMPASS }} +app_update 2519830 +quit

    - run: dir "${{ env.RESONITE_PATH }}"

    - name: Build
      run: cd "${{ env.RPC_SERVER_SRC }}"; dotnet build --no-restore --verbosity normal
    - name: Test
      run: cd "${{ env.RPC_SERVER_SRC }}"; dotnet test --no-build --verbosity normal


    - name: Assert that no resonite source files were copied into the output artifact
      run: |
        $allowedFiles = @("Google.Protobuf.dll", "Grpc.AspNetCore.Server.dll", "Grpc.Core.Api.sll", "Grpc.Net.Common.dll", "GrpcDotNetNamedPipes.dll", "JetBrains.Annotations.dll")
        Get-ChildItem -Path "${{ env.RESONITE_ASSEMBLY_PATH }}" | ForEach-Object {
          if ($allowedFiles -notcontains $_.Name -and (Test-Path "${{ env.RPC_SERVER_SRC }}/Puppeteer/bin/Debug/net9.0/$($_.Name)")) {
            Write-Error "Files from ${{ env.RESONITE_PATH }} found in ${{ env.RPC_SERVER_SRC }}/Puppeteer/bin/Debug/net9.0: $($_.Name)"
            exit 1
          }
        }
        
    - name: Copy into final package location
      run: .\DevTools~\SyncToUnity.ps1
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-build-artifacts
        path: |
          .
          ! .git
          ! .github
          ! DevTools~
          ! Resonite~
        

    - name: Save steamcmd cache
      if: steps.install-resonite.outcome == 'success'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.cache-steamcmd.outputs.cache-primary-key }}
        path: c:\steamcmd

    - name: Save resonite cache
      if: steps.install-resonite.outcome == 'success'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.cache-resonite.outputs.cache-primary-key }}
        path: "${{ env.RESONITE_PATH }}"
  license:
    uses: ${{ env.REPO }}/.github/workflows/license-file.yml@main
  package:
    needs:
      - build
      - license
    runs-on: ubuntu-latest
    steps:
      - name: Fetch dotnet build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dotnet-build-artifacts
      - name: Fetch license file artifacts
        uses: actions/download-artifact@v4
        with:
          name: COPYING.md
      - run: ls -lR
      - name: Package .zip file
        run: |
          sudo apt-get install -y zip
          zip -r resonite-hook.zip . -x resonite-hook.zip
      - name: Upload final .zip
        uses: actions/upload-artifact@v4
        with:
          name: resonite-hook.zip
          path: resonite-hook.zip